(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./lib/carousel.coffee":[function(require,module,exports){
'use strict';
var _, carousel, carouselCtrl, carouselFcty, carouselHolderDir, carouselItemDir, viewDetection;

require('angular');

_ = require('lodash');

viewDetection = require('viewport-detection');

carouselFcty = require('./carouselFcty.coffee');

carouselCtrl = require('./carouselCtrl.coffee');

carouselHolderDir = require('./carouselHolderDir.coffee');

carouselItemDir = require('./carouselItemDir.coffee');

carousel = angular.module('$carousel', ['$viewportDetection']).factory('CarouselFcty', carouselFcty).service('SetFactoryUrl', function() {
  var url;
  url = null;
  return {
    setUrl: function(path) {
      return url = path;
    },
    getUrl: function() {
      return url;
    }
  };
}).controller('CarouselCtrl', carouselCtrl).directive('carouselHolder', carouselHolderDir).directive('carouselItem', carouselItemDir);

module.exports = carousel;



},{"./carouselCtrl.coffee":"/Users/djforth/websites/modules/carousel/lib/carouselCtrl.coffee","./carouselFcty.coffee":"/Users/djforth/websites/modules/carousel/lib/carouselFcty.coffee","./carouselHolderDir.coffee":"/Users/djforth/websites/modules/carousel/lib/carouselHolderDir.coffee","./carouselItemDir.coffee":"/Users/djforth/websites/modules/carousel/lib/carouselItemDir.coffee","angular":"angular","lodash":"lodash","viewport-detection":"viewport-detection"}],"/Users/djforth/websites/modules/carousel/lib/carouselCtrl.coffee":[function(require,module,exports){
var _;

_ = require('lodash');

module.exports = [
  "$scope", "$window", "$timeout", "CarouselFcty", function($scope, $window, $timeout, CarouselFcty) {
    var delay;
    $scope.itemOut = -1;
    $scope.itemIn = 0;
    $scope.itemSelected = 0;
    $scope.carousels = [];
    delay = Math.round(parseFloat(5) * 1000);
    CarouselFcty.getData().then(function(results) {
      $scope.carousels = results;
      $scope.carouselLength = $scope.carousels.length;
      if (!($scope.carousels.length < 2)) {
        return $scope.restartTimer();
      }
    }, function(e) {
      $scope.error = e;
      return alert(e);
    });
    $scope.next = function() {
      $scope.itemOut = $scope.itemSelected;
      if ($scope.itemSelected < $scope.carouselLength - 1) {
        $scope.itemSelected++;
      } else {
        $scope.itemSelected = 0;
      }
      return $scope.setSelected();
    };
    $scope.previous = function() {
      $scope.itemOut = $scope.itemSelected;
      if ($scope.itemSelected > 0) {
        $scope.itemSelected--;
      } else {
        $scope.itemSelected = $scope.carouselLength - 1;
      }
      return $scope.setSelected("previous");
    };
    $scope.setClass = function(n) {
      if ($scope.itemSelected === n) {
        return "active";
      } else {
        return "";
      }
    };
    $scope.setpos = function(w, t) {
      var inpos, outpos;
      if (t === 'previous') {
        inpos = w + "px";
        outpos = "-" + w + "px";
      } else {
        inpos = "-" + w + "px";
        outpos = w + "px";
      }
      return {
        inpos: inpos,
        outpos: outpos
      };
    };
    $scope.selectItem = function(n) {
      $scope.itemOut = $scope.itemSelected;
      $scope.itemSelected = n;
      return $scope.setSelected();
    };
    $scope.restartTimer = function() {
      $scope.stopAutoplay();
      return $scope.timer = $timeout($scope.next, delay);
    };
    $scope.setCarousel = function(n) {
      $scope.itemOut = $scope.itemSelected;
      $scope.itemSelected = n;
      $scope.setSelected();
      return $scope.restartTimer();
    };
    $scope.showCarousel = function(n) {
      return $scope.itemSelected === n || $scope.itemOut === n;
    };
    return $scope.stopAutoplay = function() {
      if (angular.isDefined($scope.timer)) {
        $timeout.cancel($scope.timer);
      }
      return $scope.timer = void 0;
    };
  }
];



},{"lodash":"lodash"}],"/Users/djforth/websites/modules/carousel/lib/carouselFcty.coffee":[function(require,module,exports){
var _;

_ = require('lodash');

module.exports = function($http, $q, SetFactoryUrl) {
  var carouselData;
  carouselData = [];
  return {
    data: function() {
      return carouselData;
    },
    flush: function() {
      return carouselData = [];
    },
    getData: function() {
      var deferred, page;
      deferred = $q.defer();
      if (_.isEmpty(carouselData)) {
        page = page === "" ? "home" : page;
        $http.get(SetFactoryUrl.getUrl()).success(function(data) {
          carouselData = data;
          return deferred.resolve(data);
        }).error(function() {
          return deferred.reject("An error occurred while fetching items, we have been notified and are investigating.  Please try again later");
        });
      } else {
        deferred.resolve(carouselData);
      }
      return deferred.promise;
    },
    setData: function(d) {
      return carouselData = d;
    }
  };
};



},{"lodash":"lodash"}],"/Users/djforth/websites/modules/carousel/lib/carouselHolderDir.coffee":[function(require,module,exports){
var _;

require('tween-lite');

require('css-plugin');

_ = require('lodash');

module.exports = [
  '$timeout', "CarouselFcty", function($timeout) {
    return {
      restrict: 'A',
      templateUrl: 'carousel/carousel-holder.html',
      controller: "CarouselCtrl",
      link: function($scope, $elem, $attrs) {
        var loadedCount;
        $scope.TweenLite = TweenLite;
        loadedCount = 0;
        $scope.animating = false;
        $elem.on('mouseenter', function() {
          if (!$scope.animating) {
            return $scope.stopAutoplay();
          }
        });
        $elem.on('mouseleave', function() {
          if (!($scope.animating || $scope.carousels.length < 2)) {
            return $scope.restartTimer();
          }
        });
        $scope.onComplete = function() {
          $scope.animating = false;
          return $scope.restartTimer();
        };
        $scope.getElements = function() {
          var itemIn, itemOut;
          itemIn = document.getElementById("item" + $scope.itemSelected);
          itemOut = document.getElementById("item" + $scope.itemOut);
          return {
            itemIn: itemIn,
            itemOut: itemOut
          };
        };
        return $scope.setSelected = function(type) {
          var animationIn, animationOut, items, pos, width;
          if (type == null) {
            type = "next";
          }
          $scope.animating = true;
          width = $elem[0].clientWidth;
          items = $scope.getElements();
          if (items.itemIn || items.itemOut) {
            pos = $scope.setpos(width, type);
            $scope.TweenLite.set(items.itemIn, {
              css: {
                left: pos.inpos
              }
            });
            animationIn = new $scope.TweenLite(items.itemIn, 0.5, {
              css: {
                left: "0"
              }
            }, $scope.onComplete);
            animationOut = new $scope.TweenLite(items.itemOut, 0.5, {
              css: {
                left: pos.outpos
              }
            });
            return animationIn.eventCallback("onComplete", $scope.onComplete);
          }
        };
      }
    };
  }
];



},{"css-plugin":"css-plugin","lodash":"lodash","tween-lite":"tween-lite"}],"/Users/djforth/websites/modules/carousel/lib/carouselItemDir.coffee":[function(require,module,exports){
var _;

_ = require('lodash');

module.exports = [
  function() {
    return {
      restrict: 'A',
      transclude: true,
      templateUrl: "carousel/carousel-item.html",
      scope: {
        carousel: "=carousel"
      },
      link: function($scope, $elem, $attrs) {
        return $scope.$watch("carousel", function(car) {
          var img, url;
          if (!_.isUndefined(car)) {
            url = car.main.src;
            img = angular.element($elem.children().children()[0]);
            return img.css({
              'background-image': "url('" + url + "')",
              'background-size': 'cover'
            });
          }
        });
      }
    };
  }
];



},{"lodash":"lodash"}]},{},["./lib/carousel.coffee"])
//# sourceMappingURL=data:application/json;base64,
